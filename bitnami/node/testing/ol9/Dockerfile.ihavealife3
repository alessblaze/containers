# Copyright Aless Microsystems. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0
# As we know the cost is not time or money in this, specifically currency is engg quality and intellectual capacity so 
# if we don't need to enable something like ARM-NEON or AVX-512
# or some specific arch dependant perf opt then literally no need to compile. The compile time and resource heavy application like node.
# but having the option to do so in a easy way is a must for technical independence. which is why we have full build scripts also.
ARG NODE_VERSION=22.16.0
ARG PYTHON_VERSION=3.13.3
FROM openeuler/openeuler:24.03 AS builder
ARG NODE_VERSION
ARG PYTHON_VERSION
ARG TARGETARCH
RUN dnf update -y
RUN dnf install -y \
  gcc-toolset-14-gcc* gcc-toolset-14-libgcc gcc-toolset-14-binutils* gcc-toolset-14-c++* make \
  openssl-devel zlib-devel bzip2 bzip2-devel \
  sqlite sqlite-devel readline-devel \
  ncurses-devel libffi-devel scl-utils scl-utils-build \
  xz-devel gettext wget tar xz 

RUN mkdir -vp /tmp/binaries/node \
   && cd /tmp/binaries/node \
   && case "${TARGETARCH}" in \
       amd64) \
           ARCH_SUFFIX="x64" \
           ;; \
       arm64) \
           ARCH_SUFFIX="arm64" \
           ;; \
       *) \
           echo "Unsupported architecture: ${TARGETARCH}" && exit 1 \
           ;; \
   esac \
   && echo "Downloading Node.js for architecture: ${ARCH_SUFFIX}" \
   && wget https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-${ARCH_SUFFIX}.tar.xz \
   && tar -xvf node-v${NODE_VERSION}-linux-${ARCH_SUFFIX}.tar.xz \
   && mkdir -p /opt/bitnami/node \
   && cp -r node-v${NODE_VERSION}-linux-${ARCH_SUFFIX}/. /opt/bitnami/node/ \
   && echo "Node.js binary installation complete for v${NODE_VERSION} (${ARCH_SUFFIX})"
RUN dnf remove python -y 
RUN mkdir -vp /tmp/source/python \
  && cd /tmp/source/python \
  && wget https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tar.xz \
  && tar -xvf Python-${PYTHON_VERSION}.tar.xz

RUN cd /tmp/source/python/Python-${PYTHON_VERSION} \
  && CC=/opt/openEuler/gcc-toolset-14/root/usr/bin/gcc CXX=/opt/openEuler/gcc-toolset-14/root/usr/bin/g++ \
  CFLAGS='-s' \
  LDFLAGS='-Wl,-rpath=/opt/bitnami/common/lib -L/opt/bitnami/common/lib -Wl,-rpath=/opt/bitnami/python/lib -L/opt/bitnami/python/lib' \
  CPPFLAGS='-I/opt/bitnami/common/include -I/opt/bitnami/python/include' ./configure \
  --prefix=/opt/bitnami/python \
  --enable-shared \
  && make -j10 \
  && make install \
  && cd /opt/bitnami/python/bin \
  && ln -s python3 python \
  && ln -s pip3 pip
   
ENV PATH="/opt/bitnami/python/bin:/opt/bitnami/node/bin:$PATH"

RUN cd /opt/bitnami/node/bin \
   && npm install -g pnpm \
   && corepack enable

ADD euler-null.sh /tmp/
RUN bash /tmp/euler-null.sh ca-certificates \
  shadow-utils \
  bzip2 \
  libffi \
  xz \
  ncurses \
  readline \
  sqlite \
  openssl \
  libstdc++ \
  zlib \
  pkgconf-pkg-config \
  procps-ng \
  unzip \
  findutils 

FROM openeuler/openeuler:24.03

ARG DOWNLOADS_URL="downloads.bitnami.com/files/stacksmith"
ARG TARGETARCH

LABEL org.opencontainers.image.base.name="docker.io/openeuler/openeuler:24.03" \
      org.opencontainers.image.created="2025-05-22T09:05:08Z" \
      org.opencontainers.image.description="Application packaged by Aless Microsystems." \
      org.opencontainers.image.documentation="https://github.com/bitnami/containers/tree/main/bitnami/node/README.md" \
      org.opencontainers.image.ref.name="22.16.0-oe2403SP1-ams" \
      org.opencontainers.image.source="https://github.com/bitnami/containers/tree/main/bitnami/node" \
      org.opencontainers.image.title="node" \
      org.opencontainers.image.vendor="Aless Microsystems." \
      org.opencontainers.image.version="22.16.0"

ENV OS_ARCH="${TARGETARCH:-amd64}" \
    OS_FLAVOUR="oe2403SP1" \
    OS_NAME="linux"

COPY --from=builder /opt/bitnami /opt/bitnami
COPY prebuildfs /
SHELL ["/bin/bash", "-o", "errexit", "-o", "nounset", "-o", "pipefail", "-c"]
# Install required system packages and dependencies
RUN dnf install -y \
  make \
  ca-certificates \
  curl \
  git \
  bzip2 bzip2-devel \
  libffi libffi-devel \
  xz xz-devel \
  ncurses ncurses-devel \
  readline readline-devel \
  sqlite sqlite-devel \
  openssl openssl-devel \
  glibc-devel libstdc++ \
  zlib zlib-devel \
  pkgconf-pkg-config \
  procps-ng \
  unzip \
  wget \
  findutils \
  gcc-toolset-14-gcc \
  gcc-toolset-14-libgcc \
  gcc-toolset-14-binutils \
  gcc-toolset-14-c++
    
RUN mkdir -p /tmp/bitnami/pkg/cache/ ; cd /tmp/bitnami/pkg/cache/ || exit 1 ; \
    COMPONENTS=( \
#      "python-3.13.3-4-linux-${OS_ARCH}-debian-12" \
#      "node-22.15.0-0-linux-${OS_ARCH}-debian-12" \
    ) ; \
    for COMPONENT in "${COMPONENTS[@]}"; do \
      if [ ! -f "${COMPONENT}.tar.gz" ]; then \
        curl -SsLf "https://${DOWNLOADS_URL}/${COMPONENT}.tar.gz" -O ; \
        curl -SsLf "https://${DOWNLOADS_URL}/${COMPONENT}.tar.gz.sha256" -O ; \
      fi ; \
      sha256sum -c "${COMPONENT}.tar.gz.sha256" ; \
      tar -zxf "${COMPONENT}.tar.gz" -C /opt/bitnami --strip-components=2 --no-same-owner ; \
      rm -rf "${COMPONENT}".tar.gz{,.sha256} ; \
    done
RUN dnf update -y && dnf remove python -y && dnf clean all
RUN find / -perm /6000 -type f -exec chmod a-s {} \; || true
RUN mkdir /.npm && chmod g+rwX /.npm
RUN sed -i 's/^PASS_MAX_DAYS.*/PASS_MAX_DAYS    90/' /etc/login.defs && \
    sed -i 's/^PASS_MIN_DAYS.*/PASS_MIN_DAYS    0/' /etc/login.defs && \
    sed -i 's/^# *minlen = 8/minlen = 8/' /etc/security/pwquality.conf

COPY rootfs /
RUN /opt/bitnami/scripts/node/postunpack.sh
ENV APP_VERSION="22.16.0" \
    BITNAMI_APP_NAME="node" \
    PATH="/opt/bitnami/python/bin:/opt/bitnami/node/bin:$PATH"
EXPOSE 3000

WORKDIR /app
CMD [ "node" ]
